package app.model;

/*
Authors: Jaiveer Katariya, Jongho Shin, Kyle Harvey

This class is used to generate a new properties file based on preferences/configurations specified by the user in the
view that appears when they customize/write a new configuration. It assumes that the user possesses the following
dependencies/packages:
java.io.*;
java.util.Properties;

This class is used in the SimulationController to write a new properties file with the parameters specified in the
ControlView that is associated with that active SimulationController. To use it, one would simply need to declare
it with the parameters specified by the constructor.

*/

import java.io.*;
import java.util.Properties;

public class PropertiesFileWriter {
    private String myPropFileName;
    private String myName;
    private String myGameType;
    private String myDescription;
    private String fullCSVName;
    private String myPropFile;
    private String gridShape;
    private String edgePol;
    private String neighborPol;

    private Properties prop;

    /**
     * Constructor to create new PropertiesFileWriter object to write properties file with specified configurations
     *
     * @param propertiesFileName name of properties file to be written (without extension)
     * @param name name of the creator of the configuration
     * @param gameType name of the game this configuration is for
     * @param description user-input description for the configuration they're creating
     * @param csvNumber which of the 3 CSVs for each game they wish to use
     * @param gridShape the grid shape the user wishes to use for their configuration
     * @param edgePol the edge policy the user wishes to use for their configuration
     * @param neighborPol the neighbors policy the user wishes to use in their configuration
     */

    public PropertiesFileWriter(String propertiesFileName, String name, String gameType, String description, String csvNumber, String gridShape, String edgePol, String neighborPol){
        this.myPropFileName = propertiesFileName + ".properties";
        this.myPropFile = propertiesFileName;
        this.myName = name.replaceAll("\\s","");
        this.myGameType = gameType;
        this.myDescription = description;
        this.fullCSVName = gameType + "Config" + csvNumber + ".csv";
        this.gridShape = gridShape.toLowerCase();
        this.edgePol = edgePol;
        this.neighborPol = neighborStringToNumber(neighborPol);

        prop = new Properties();
        setPropertyFileValues();
        writePropertiesFile();
    }

    /**
     * Function to return file name of properties file generated
     *
     * @return name of properties file generated by writer
     */
    public String getMyPropFile() {
        return myPropFile;
    }


    private void setPropertyFileValues(){
        prop.setProperty("name_of_creator", myName);
        prop.setProperty("type_of_game", myGameType);
        prop.setProperty("description", myDescription);
        prop.setProperty("name_of_csv", fullCSVName);
        prop.setProperty("shape", gridShape);
        prop.setProperty("edge_policy", edgePol);
        prop.setProperty("neighbor_type", neighborPol);


    }

    private void writePropertiesFile(){
        try {
            File file = new File("data/" + myPropFileName);
            file.createNewFile();

            var output = new BufferedWriter(new FileWriter(file));

            String fullNameString = "name_of_creator=" + myName;
            String fullGameString = "type_of_game=" + myGameType;
            String fullDescString = "description=" + myDescription;
            String csvString = "name_of_csv=" + fullCSVName;
            String shapeString = "shape=" + gridShape;
            String edgePolicyString = "edge_policy=" + edgePol;
            String neighborTypeString = "neighbor_type=" + neighborPol;

            String[] toBeWritten = {fullNameString, fullGameString, fullDescString, csvString, shapeString, edgePolicyString, neighborTypeString};

            for(String value:toBeWritten){
                output.write(value + "\n");
            }

            output.close();


        } catch( IOException e) {
            e.printStackTrace();
        }

    }

    private String neighborStringToNumber(String neighborType){
        if(neighborType.equalsIgnoreCase("all but left")){
            return "3";
        }

        else if(neighborType.equalsIgnoreCase("cardinal")){
            return "2";
        }

        else{
            return "1";
        }
    }


}
